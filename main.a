;/*********************************************
;Project : Test software
;**********************************************
;Chip type: ATmega164A
;Clock frequency: 20 MHz
;Compilers:  CVAVR 2.x
;*********************************************/
;
;#include <mega164a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x01
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x0E
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x04
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x06
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x0C
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x0E
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x02
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=smcr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <string.h>
;#include <stdlib.h>
;#include "defs.h"
;#include <alcd.h>      // Alphanumeric LCD functions
;
;float temp_preset=25;   //temperatura setata default

	.DSEG
;float err=1;    //eroarea permisa
;int i=0;
;int mod_set=1;      //1 =set temperatura, 0=set eroare temperatura
;float temperatura=0;           //valoarea in grade Celsius
;unsigned char buf1[6], buf2[6],  buf3[6];          // buffer folosit pt afisare pe LCD
;
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)    // citire adc, read_adc(0) - citeste PA0 si returneaza un nr intre 0-1023, adica 2^10
; 0000 001A {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001B ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;PCODE: $0000000F VOL: 0
;	adc_input -> Y+0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 001C // Delay needed for the stabilization of the ADC input voltage
; 0000 001D delay_us(10);
;PCODE: $00000013 VOL: 0
; 0000 001E // Start the AD conversion
; 0000 001F ADCSRA|=0x40;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0020 // Wait for the AD conversion to complete
; 0000 0021 while ((ADCSRA & 0x10)==0);
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0022 ADCSRA|=0x10;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0023 return ADCW;  //[0-1023]
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0024 }
;PCODE: $00000023 VOL: 0
;
;void afisare(){
; 0000 0026 void afisare(){
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0027         ftoa(temperatura,1,buf1);                //converteste float in string cu precizie de 1 zecimala
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0028         ftoa(temp_preset,1,buf2);                        //converteste int in char pt a nu avea zecimale
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0029         ftoa(err,1,buf3);
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 002A 
; 0000 002B     lcd_clear();             //sterge tot LCD
;PCODE: $00000038 VOL: 0
; 0000 002C     lcd_gotoxy(0,0);                     // x=0,y=0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 002D     lcd_puts("Temp:");
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 002E     lcd_gotoxy(6,0);              //x=6
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 002F     lcd_puts(buf1);                 //afisez temperatura masurata
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0030     lcd_puts("C");
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0031 
; 0000 0032     lcd_gotoxy(0,1);                  //randul y=1
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0033     lcd_puts("Set:");               //afisez temperatura setata
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0034     lcd_gotoxy(4,1);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0035     lcd_puts(buf2);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0036     lcd_puts("C");
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0037 
; 0000 0038     lcd_gotoxy(11,1);                  //randul y=1
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0039     lcd_puts("E:");               //afisez  eroarea setata
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 003A     lcd_gotoxy(13,1);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 003B     lcd_puts(buf3);
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 003C 
; 0000 003D     if(tranzistor==1){          //afisez starea ventilatorului
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 003E     lcd_gotoxy(12,0);   // x=0,y=0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 003F     lcd_puts(" ON");
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0040     }
; 0000 0041     else{
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0042     lcd_gotoxy(12,0);   // x=0,y=0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0043     lcd_puts(" OFF");
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0044     }
;PCODE: $00000079 VOL: 0
; 0000 0045 }
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0

	.DSEG
_0x8:
	.BYTE 0x1B
;
;/*
; * Timer 1 Output Compare A interrupt is used to blink LED
; */
;interrupt [TIM1_COMPA] void timer1_compa_isr(void)     //intrerupere pe timer1 la 0.5 secunde
; 0000 004B {

	.CSEG
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 004C LED1 = ~LED1; // invert LED
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 004D 
; 0000 004E     for(i=0;i<20;i++){                              //face 20 citiri ale ADC pentru a elimina zgomotul
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 004F         temperatura=temperatura+read_adc(0);   //retuneaza val numerica 0-1023
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 0050         delay_ms(2);                                  //2 ms intre citiri
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 0051         }
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 0052         temperatura=temperatura/20;                      //mediaza  cele 20 de citiri
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 0053         temperatura=temperatura*2;      //divizor rezistiv 1/2
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 0054         temperatura=2.56*temperatura/1024;           //convertim in Volti, 2.565V - tens referinta
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 0055         temperatura=temperatura-2.73;                 //elimina offset de la senzor ( 2730mV offset si 10mV/°C panta)
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 0056         temperatura=temperatura*100;                 //convertim in grade Celsius cunoscand 10mV/°C
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 0057 
; 0000 0058     if(temperatura>temp_preset+err){                 //daca a depasit temperatura setata
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0059     tranzistor=1;                                    //porneste ventilator ;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 005A     }
; 0000 005B     else if(temperatura<temp_preset-err){         //daca este sub temperatura setata
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 005C      tranzistor=0;                                          //oprestre ventilator
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 005D      }
; 0000 005E 
; 0000 005F     afisare();      //afisez periodic masuratorile
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 0060 }
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;
;
;
;/*
; * main function of program
; */
;void main (void)
; 0000 0068 {
;PCODE: $000000CF VOL: 0
; 0000 0069 
; 0000 006A 	Init_initController();  // this must be the first "init" action/call!
;PCODE: $000000D0 VOL: 0
; 0000 006B 	#asm("sei")             // enable interrupts pt timer1
;PCODE: $000000D1 VOL: 0
	sei
;PCODE: $000000D2 VOL: 0
; 0000 006C 	LED1 = 1;           	// initial state, will be changed by timer 1
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 006D     lcd_init(16);   //apelam pt initializare LCD cu 16 caractere
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 006E 
; 0000 006F 	while(1)
;PCODE: $000000D7 VOL: 0
; 0000 0070 	{
; 0000 0071 
; 0000 0072 		wdogtrig();	        // call often else processor will reset
;PCODE: $000000D8 VOL: 0
	wdr
;PCODE: $000000D9 VOL: 0
; 0000 0073 
; 0000 0074         if(buton_up == 0)        // pressed
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 0075         {
; 0000 0076             delay_ms(30);   // debounce switch
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 0077             if(buton_up == 0)
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 0078             {                // LED will blink slow or fast
; 0000 0079                 while(buton_up==0)    //astept eliberare buton
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 007A                  {   wdogtrig();   } // wait for release
;PCODE: $000000E7 VOL: 0
	wdr
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 007B                  if(mod_set)   {
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 007C                     temp_preset=temp_preset+1;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 007D                     if(temp_preset>40)temp_preset=40;   //limitez la 40 grade
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 007E                     }
;PCODE: $000000F7 VOL: 0
; 0000 007F                     else {
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 0080                     err=err+0.5;
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 0081                     }
;PCODE: $000000FE VOL: 0
; 0000 0082                  afisare();   //update afisare
;PCODE: $000000FF VOL: 0
; 0000 0083             }
; 0000 0084         }
;PCODE: $00000100 VOL: 0
; 0000 0085 
; 0000 0086         if(buton_down == 0)        // pressed
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 0087         {
; 0000 0088             delay_ms(30);   // debounce switch
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 0089             if(buton_down == 0)
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 008A             {                // LED will blink slow or fast
; 0000 008B                 while(buton_down==0)
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 008C                   {  wdogtrig();   } // wait for release
;PCODE: $0000010F VOL: 0
	wdr
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 008D 
; 0000 008E                   if(mod_set){
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 008F                     temp_preset=temp_preset-1;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
; 0000 0090                     if(temp_preset<18)temp_preset=18;
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 0091                     }
;PCODE: $0000011F VOL: 0
; 0000 0092                     else {
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 0093                     if(err>=1)err=err-0.5;
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 0094                     }
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 0095                  afisare();   //update afisare
;PCODE: $0000012C VOL: 0
; 0000 0096             }
; 0000 0097         }
;PCODE: $0000012D VOL: 0
; 0000 0098 
; 0000 0099                 if(buton_set == 0)        // pressed
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 009A         {
; 0000 009B             delay_ms(30);   // debounce switch
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 009C             if(buton_set == 0)
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 009D             {                // LED will blink slow or fast
; 0000 009E                 while(buton_set==0)    //astept eliberare buton
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 009F                  {   wdogtrig();   } // wait for release
;PCODE: $0000013C VOL: 0
	wdr
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 00A0                  if(mod_set)  mod_set=0;
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 00A1                     else mod_set=1;
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 00A2                afisare();   //update afisare
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 00A3             }
; 0000 00A4         }
;PCODE: $00000149 VOL: 0
; 0000 00A5 
; 0000 00A6     }
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 00A7 
; 0000 00A8 
; 0000 00A9 }// end main loop
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;
;
